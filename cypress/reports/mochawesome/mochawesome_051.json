{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2024-10-24T06:01:36.316Z",
    "end": "2024-10-24T06:02:00.913Z",
    "duration": 24597,
    "testsRegistered": 13,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 12,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "456c8333-b31e-4d53-b72e-0881f0f87dfa",
      "title": "",
      "fullFile": "cypress\\tests\\CreatePlan.spec.js",
      "file": "cypress\\tests\\CreatePlan.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
          "title": "Create plan",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to create a business USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business USD plan successfully",
              "timedOut": null,
              "duration": 24491,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName(); // Generate a random plan name\nconst amount = createPlan.generateRandomAmount(); // Generate a random amount\nconst date = createPlan.generateRandomFutureDate(); // Generate a random future date\n// Create the USD business plan with generated values\ncreatePlan.usdBusinessPlan(name, amount, date);\n// Assert that the success message appears\ncreatePlan.assertSuccess();\n// Delete the created plans for cleanup\ncreatePlan.deletePlans();",
              "err": {
                "message": "AssertionError: Timed out retrying after 12000ms: Expected to find element: `[href=\"/plans\"]`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Create plan`",
                "estack": "AssertionError: Timed out retrying after 12000ms: Expected to find element: `[href=\"/plans\"]`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Create plan`\n    at plansButton (webpack://risevest/./cypress/pageObjects/viewPlansPage.js:5:30)\n    at clickPlansButton (webpack://risevest/./cypress/pageObjects/viewPlansPage.js:10:22)\n    at  (webpack://risevest/./cypress/tests/CreatePlan.spec.js:26:18)\n    at __webpack_modules__</setRunnable/runnable.fn (https://app.risevest.com/__cypress/runner/cypress_runner.js:138412:43)\n    at callFn (https://app.risevest.com/__cypress/runner/cypress_runner.js:157028:21)\n    at __webpack_modules__</Runnable.prototype.run (https://app.risevest.com/__cypress/runner/cypress_runner.js:157015:13)\n    at __webpack_modules__</create/onRunnableRun (https://app.risevest.com/__cypress/runner/cypress_runner.js:162939:30)\n    at finallyHandler (https://app.risevest.com/__cypress/runner/cypress_runner.js:4072:23)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromiseFromHandler (https://app.risevest.com/__cypress/runner/cypress_runner.js:1519:31)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1576:18)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1701:18)\n    at __webpack_modules__</module.exports/Promise.prototype._fulfill (https://app.risevest.com/__cypress/runner/cypress_runner.js:1645:18)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1589:21)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1701:18)\n    at __webpack_modules__</module.exports/Promise.prototype._fulfill (https://app.risevest.com/__cypress/runner/cypress_runner.js:1645:18)\n    at __webpack_modules__</module.exports/Promise.prototype._resolveCallback (https://app.risevest.com/__cypress/runner/cypress_runner.js:1439:57)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromiseFromHandler (https://app.risevest.com/__cypress/runner/cypress_runner.js:1531:17)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1576:18)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1701:18)\n    at __webpack_modules__</module.exports/Promise.prototype._fulfill (https://app.risevest.com/__cypress/runner/cypress_runner.js:1645:18)\n    at __webpack_modules__</module.exports/PromiseArray.prototype._resolve (https://app.risevest.com/__cypress/runner/cypress_runner.js:2932:19)\n    at __webpack_modules__</module.exports/PromiseArray.prototype._promiseFulfilled (https://app.risevest.com/__cypress/runner/cypress_runner.js:2950:14)\n    at __webpack_modules__</module.exports/PromiseArray.prototype._iterate (https://app.risevest.com/__cypress/runner/cypress_runner.js:2920:31)\n    at init (https://app.risevest.com/__cypress/runner/cypress_runner.js:2884:10)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1573:21)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1701:18)\n    at __webpack_modules__</module.exports/Promise.prototype._fulfill (https://app.risevest.com/__cypress/runner/cypress_runner.js:1645:18)\n    at __webpack_modules__</module.exports/PromiseArray.prototype._resolve (https://app.risevest.com/__cypress/runner/cypress_runner.js:2932:19)\n    at __webpack_modules__</module.exports/PromiseArray.prototype._promiseFulfilled (https://app.risevest.com/__cypress/runner/cypress_runner.js:2950:14)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1581:26)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1701:18)\n    at __webpack_modules__</module.exports/Promise.prototype._fulfill (https://app.risevest.com/__cypress/runner/cypress_runner.js:1645:18)\n    at __webpack_modules__</module.exports/PromiseArray.prototype._resolve (https://app.risevest.com/__cypress/runner/cypress_runner.js:2932:19)\n    at __webpack_modules__</module.exports/MappingPromiseArray.prototype._promiseFulfilled (https://app.risevest.com/__cypress/runner/cypress_runner.js:4987:18)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1581:26)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at __webpack_modules__</module.exports/Promise.prototype._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1701:18)\n    at _drainQueueStep (https://app.risevest.com/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (https://app.risevest.com/__cypress/runner/cypress_runner.js:2400:24)\n    at __webpack_modules__</Async.prototype._drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2416:16)\n    at __webpack_modules__</Async/this.drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2286:14)",
                "diff": null
              },
              "uuid": "9b75301f-7a27-40ed-96a3-5bcdd19c6acf",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a business naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "3a64cc29-ed23-4841-923e-f8dbad98d62d",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is able to create a new investment plan",
              "fullTitle": "Create plan Verify user is able to create a new investment plan",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst percent = createPlan.getRandomPercentage(); // Generate random percentage\nconst age = createPlan.getRandomRetirementAge(); // Generate random retirement age\ncreatePlan.investmentPlan(name, amount, percent, age);\ncreatePlan.assertSuccess(); // Assert success message\ncreatePlan.deletePlans(); // Clean up by deleting created plans",
              "err": {},
              "uuid": "365478a3-7dcd-4c91-b4a4-992e40f72854",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is able to create a School naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "7a5971e3-b139-4aa2-8c31-521daf595546",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is able to create a School USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.usdSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "0b0f9c76-86e7-4132-a5d7-211991e3065d",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "09a1cf80-2f54-4adc-8414-bb2d0f2f09e0",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "df4b5045-d313-49dd-ad31-57b8d555ffb2",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "e742089a-dfa5-4b83-8f9d-5b1be2477936",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "adb74672-f6a5-4389-97a4-f663823e431b",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "6cd8b1ec-f4f7-4739-8000-a481320daa27",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "0666b130-78ae-4d2f-b494-8748c196590c",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is unable to create plan with a past date",
              "fullTitle": "Create plan Verify user is unable to create plan with a past date",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.pastDate; // Past date\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to past date",
              "err": {},
              "uuid": "d90c0cd4-6874-4194-b7b0-b2001817d97f",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is unable to create plan with a invalid date",
              "fullTitle": "Create plan Verify user is unable to create plan with a invalid date",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.invalidDate; // Invalid date format\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to invalid date",
              "err": {},
              "uuid": "183dc129-2889-4d18-85de-abb727e21828",
              "parentUUID": "bc343fe2-10e5-4751-9a0b-c656b5ed886c",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9b75301f-7a27-40ed-96a3-5bcdd19c6acf"
          ],
          "pending": [],
          "skipped": [
            "3a64cc29-ed23-4841-923e-f8dbad98d62d",
            "365478a3-7dcd-4c91-b4a4-992e40f72854",
            "7a5971e3-b139-4aa2-8c31-521daf595546",
            "0b0f9c76-86e7-4132-a5d7-211991e3065d",
            "09a1cf80-2f54-4adc-8414-bb2d0f2f09e0",
            "df4b5045-d313-49dd-ad31-57b8d555ffb2",
            "e742089a-dfa5-4b83-8f9d-5b1be2477936",
            "adb74672-f6a5-4389-97a4-f663823e431b",
            "6cd8b1ec-f4f7-4739-8000-a481320daa27",
            "0666b130-78ae-4d2f-b494-8748c196590c",
            "d90c0cd4-6874-4194-b7b0-b2001817d97f",
            "183dc129-2889-4d18-85de-abb727e21828"
          ],
          "duration": 24491,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}