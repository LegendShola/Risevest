{
  "stats": {
    "suites": 15,
    "tests": 72,
    "passes": 0,
    "pending": 63,
    "failures": 6,
    "testsRegistered": 72,
    "passPercent": 0,
    "pendingPercent": 87.5,
    "other": 0,
    "hasOther": false,
    "skipped": 3,
    "hasSkipped": true,
    "start": "2024-10-24T19:36:02.393Z",
    "end": "2024-10-24T19:38:10.805Z",
    "duration": 128412
  },
  "results": [
    {
      "uuid": "57c09e43-cd15-4649-8faa-65e563b70f51",
      "title": "",
      "fullFile": "cypress\\tests\\CreatePlan.spec.js",
      "file": "cypress\\tests\\CreatePlan.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
          "title": "Create plan",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to create a business USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName(); // Generate a random plan name\nconst amount = createPlan.generateRandomAmount(); // Generate a random amount\nconst date = createPlan.generateRandomFutureDate(); // Generate a random future date\n// Create the USD business plan with generated values\ncreatePlan.usdBusinessPlan(name, amount, date);\n// Assert that the success message appears\ncreatePlan.assertSuccess();\n// Delete the created plans for cleanup\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "b2ee0141-0f5c-4124-8d86-8e8640f9d720",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a business naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "388778fd-55b8-4808-94c1-9a715bf84190",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a new investment plan",
              "fullTitle": "Create plan Verify user is able to create a new investment plan",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst percent = createPlan.getRandomPercentage(); // Generate random percentage\nconst age = createPlan.getRandomRetirementAge(); // Generate random retirement age\ncreatePlan.investmentPlan(name, amount, percent, age);\ncreatePlan.assertSuccess(); // Assert success message\ncreatePlan.deletePlans(); // Clean up by deleting created plans",
              "err": {},
              "uuid": "850ebdc0-d79f-4edd-84dc-26e2011ae88a",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "ac99fc15-b4fc-4f4a-a304-f4d009567e60",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.usdSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "31c5a722-abe0-4c33-a985-5523304910c9",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "6f255ce7-e860-4832-ae30-0d05fdb0c2fe",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "598b4a7d-22d9-490e-9a0b-da11c4e3946e",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "9f0b7ccf-9fb9-4417-ab8c-71c285ffdf0c",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "8da2ff2e-916b-4e62-9d9e-5823b5a38423",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "b8be46c1-5d1b-4594-8183-52b85a3ca360",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "5f1e0b1b-e9c1-4bec-bc93-8561f2843f39",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a past date",
              "fullTitle": "Create plan Verify user is unable to create plan with a past date",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.pastDate; // Past date\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to past date",
              "err": {},
              "uuid": "bec0e3df-0e20-49cc-b084-221e91c0a676",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a invalid date",
              "fullTitle": "Create plan Verify user is unable to create plan with a invalid date",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.invalidDate; // Invalid date format\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to invalid date",
              "err": {},
              "uuid": "999bd21e-58c1-4b72-8e94-0d57ac518bb6",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "b2ee0141-0f5c-4124-8d86-8e8640f9d720",
            "388778fd-55b8-4808-94c1-9a715bf84190",
            "850ebdc0-d79f-4edd-84dc-26e2011ae88a",
            "ac99fc15-b4fc-4f4a-a304-f4d009567e60",
            "31c5a722-abe0-4c33-a985-5523304910c9",
            "6f255ce7-e860-4832-ae30-0d05fdb0c2fe",
            "598b4a7d-22d9-490e-9a0b-da11c4e3946e",
            "9f0b7ccf-9fb9-4417-ab8c-71c285ffdf0c",
            "8da2ff2e-916b-4e62-9d9e-5823b5a38423",
            "b8be46c1-5d1b-4594-8183-52b85a3ca360",
            "5f1e0b1b-e9c1-4bec-bc93-8561f2843f39",
            "bec0e3df-0e20-49cc-b084-221e91c0a676",
            "999bd21e-58c1-4b72-8e94-0d57ac518bb6"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3625b9d6-6f1a-4524-8cfd-df8337a13d99",
      "title": "",
      "fullFile": "cypress\\tests\\Signin.spec.js",
      "file": "cypress\\tests\\Signin.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
          "title": "User sign in process",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to sign in successfully",
              "fullTitle": "User sign in process Verify user is able to sign in successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertSuccess(); // Assert successful sign-in",
              "err": {},
              "uuid": "ab255fd7-00ca-4c95-b97d-3438ac9ed5e0",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with a wrong email address",
              "fullTitle": "User sign in process Verify user is unable to sign in with a wrong email address",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.wrongEmail; // Get wrong email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertFailure(); // Assert failure due to wrong email",
              "err": {},
              "uuid": "7dd3f987-e4c9-49a8-9f48-e7cbaa903dc7",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an invalid email address",
              "fullTitle": "User sign in process Verify user is unable to sign in with an invalid email address",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.invalidEmail; // Get invalid email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertInvalidEmail(); // Assert failure due to invalid email format",
              "err": {},
              "uuid": "e9e8a645-3176-4fe4-9e6a-bb6279d88590",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with invalid password",
              "fullTitle": "User sign in process Verify user is unable to sign in with invalid password",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.invalidPassword; // Get invalid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertFailure(); // Assert failure due to invalid password",
              "err": {},
              "uuid": "a53a68cb-db21-4153-8f29-d5043a746210",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty password field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty password field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.invalidPassword; // Get any password to clear later\nsignIn.signInEmptyPassword(email, password); // Perform sign-in with empty password\nsignIn.assertEmptyPassword(); // Assert failure due to empty password",
              "err": {},
              "uuid": "81636bfd-e013-4e03-bd8d-84c984629a1d",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty email field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty email field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get any email to clear later\nconst password = data.password; // Get valid password from test data\nsignIn.signInEmptyEmail(email, password); // Perform sign-in with empty email\nsignIn.assertEmptyEmail(); // Assert failure due to empty email",
              "err": {},
              "uuid": "9042d944-a992-43e6-a21b-67437102edad",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty email and password field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty email and password field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get any email to clear later\nconst password = data.password; // Get valid password from test data\nsignIn.signInEmptyEmailAndPassword(email, password); // Perform sign-in with both fields empty\nsignIn.assertEmptyEmail(); // Assert failure due to empty email\nsignIn.assertEmptyPassword(); // Assert failure due to empty password",
              "err": {},
              "uuid": "e43563af-bc25-485b-bf1f-adb12067c3e2",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "ab255fd7-00ca-4c95-b97d-3438ac9ed5e0",
            "7dd3f987-e4c9-49a8-9f48-e7cbaa903dc7",
            "e9e8a645-3176-4fe4-9e6a-bb6279d88590",
            "a53a68cb-db21-4153-8f29-d5043a746210",
            "81636bfd-e013-4e03-bd8d-84c984629a1d",
            "9042d944-a992-43e6-a21b-67437102edad",
            "e43563af-bc25-485b-bf1f-adb12067c3e2"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9109bffd-3583-45ec-a8b1-7befe1a6ab6f",
      "title": "",
      "fullFile": "cypress\\tests\\ViewPlans.spec.js",
      "file": "cypress\\tests\\ViewPlans.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fd6c4d54-28ec-412e-beb7-830355476713",
          "title": "View plans",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to view plans",
              "fullTitle": "View plans Verify user is able to view plans",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "// Click on the plans button to navigate to the plans page\nviewPlans.clickPlansButton();\n// Assert that plans are displayed successfully\nviewPlans.assertPlans();",
              "err": {},
              "uuid": "37fc923f-b397-4712-b188-e6d66215e22c",
              "parentUUID": "fd6c4d54-28ec-412e-beb7-830355476713",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "37fc923f-b397-4712-b188-e6d66215e22c"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "324328c7-b200-4159-bc4d-90de33ddf369",
      "title": "",
      "fullFile": "cypress\\tests\\ViewWallet.spec.js",
      "file": "cypress\\tests\\ViewWallet.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8b32022e-3e1a-48a8-a1c5-157af5e083f6",
          "title": "User view wallet process",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to view wallet successfully",
              "fullTitle": "User view wallet process Verify user is able to view wallet successfully",
              "timedOut": null,
              "duration": 60254,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "viewWallet.openWallet(); // Navigate to the wallet page\nviewWallet.assertBalance(); // Assert that the wallet balance is displayed correctly",
              "err": {
                "message": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `User view wallet process`",
                "estack": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `User view wallet process`\n    at timedOutWaitingForPageLoad (https://app.risevest.com/__cypress/runner/cypress_runner.js:130682:64)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:131667:16)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:4186:41)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (https://app.risevest.com/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1697:18)\n    at _drainQueueStep (https://app.risevest.com/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (https://app.risevest.com/__cypress/runner/cypress_runner.js:2400:9)\n    at Async._drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2416:5)\n    at Async.drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2286:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://risevest/./cypress/tests/ViewWallet.spec.js:19:11)",
                "diff": null
              },
              "uuid": "27afbf5c-7acb-4796-9b94-484b5ce50c25",
              "parentUUID": "8b32022e-3e1a-48a8-a1c5-157af5e083f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "27afbf5c-7acb-4796-9b94-484b5ce50c25"
          ],
          "pending": [],
          "skipped": [],
          "duration": 60254,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "35f8d793-5e91-457b-bd04-33f7c023fe6d",
      "title": "",
      "fullFile": "cypress\\tests\\WalletBalance.spec.js",
      "file": "cypress\\tests\\WalletBalance.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5d33e79f-68d6-4363-81fd-d92c63a1ce98",
          "title": "Show/Hide Wallet Balance",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to hide wallet balance",
              "fullTitle": "Show/Hide Wallet Balance Verify user is able to hide wallet balance",
              "timedOut": null,
              "duration": 60222,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "walletBalance.clickEyeIcon(); // Click the eye icon to hide the balance\nwalletBalance.assertHideBalance(); // Assert that the balance is hidden",
              "err": {
                "message": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Show/Hide Wallet Balance`",
                "estack": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Show/Hide Wallet Balance`\n    at timedOutWaitingForPageLoad (https://app.risevest.com/__cypress/runner/cypress_runner.js:130682:64)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:131667:16)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:4186:41)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (https://app.risevest.com/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1697:18)\n    at _drainQueueStep (https://app.risevest.com/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (https://app.risevest.com/__cypress/runner/cypress_runner.js:2400:9)\n    at Async._drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2416:5)\n    at Async.drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2286:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://risevest/./cypress/tests/WalletBalance.spec.js:21:11)",
                "diff": null
              },
              "uuid": "4d74020b-65d6-4982-8020-ed68afa71cf3",
              "parentUUID": "5d33e79f-68d6-4363-81fd-d92c63a1ce98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to show wallet balance",
              "fullTitle": "Show/Hide Wallet Balance Verify user is able to show wallet balance",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "walletBalance.clickEyeIcon(); // Click the eye icon to hide the balance first\nwalletBalance.clickEyeIcon(); // Click the eye icon again to show the balance\nwalletBalance.assertShowBalance(); // Assert that the balance is visible",
              "err": {},
              "uuid": "86232460-d6b0-4e43-8818-51eaa2e97b41",
              "parentUUID": "5d33e79f-68d6-4363-81fd-d92c63a1ce98",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4d74020b-65d6-4982-8020-ed68afa71cf3"
          ],
          "pending": [],
          "skipped": [
            "86232460-d6b0-4e43-8818-51eaa2e97b41"
          ],
          "duration": 60222,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "57c09e43-cd15-4649-8faa-65e563b70f51",
      "title": "",
      "fullFile": "cypress\\tests\\CreatePlan.spec.js",
      "file": "cypress\\tests\\CreatePlan.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
          "title": "Create plan",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to create a business USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName(); // Generate a random plan name\nconst amount = createPlan.generateRandomAmount(); // Generate a random amount\nconst date = createPlan.generateRandomFutureDate(); // Generate a random future date\n// Create the USD business plan with generated values\ncreatePlan.usdBusinessPlan(name, amount, date);\n// Assert that the success message appears\ncreatePlan.assertSuccess();\n// Delete the created plans for cleanup\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "b2ee0141-0f5c-4124-8d86-8e8640f9d720",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a business naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "388778fd-55b8-4808-94c1-9a715bf84190",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a new investment plan",
              "fullTitle": "Create plan Verify user is able to create a new investment plan",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst percent = createPlan.getRandomPercentage(); // Generate random percentage\nconst age = createPlan.getRandomRetirementAge(); // Generate random retirement age\ncreatePlan.investmentPlan(name, amount, percent, age);\ncreatePlan.assertSuccess(); // Assert success message\ncreatePlan.deletePlans(); // Clean up by deleting created plans",
              "err": {},
              "uuid": "850ebdc0-d79f-4edd-84dc-26e2011ae88a",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "ac99fc15-b4fc-4f4a-a304-f4d009567e60",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.usdSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "31c5a722-abe0-4c33-a985-5523304910c9",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "6f255ce7-e860-4832-ae30-0d05fdb0c2fe",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "598b4a7d-22d9-490e-9a0b-da11c4e3946e",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "9f0b7ccf-9fb9-4417-ab8c-71c285ffdf0c",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "8da2ff2e-916b-4e62-9d9e-5823b5a38423",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "b8be46c1-5d1b-4594-8183-52b85a3ca360",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "5f1e0b1b-e9c1-4bec-bc93-8561f2843f39",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a past date",
              "fullTitle": "Create plan Verify user is unable to create plan with a past date",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.pastDate; // Past date\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to past date",
              "err": {},
              "uuid": "bec0e3df-0e20-49cc-b084-221e91c0a676",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a invalid date",
              "fullTitle": "Create plan Verify user is unable to create plan with a invalid date",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.invalidDate; // Invalid date format\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to invalid date",
              "err": {},
              "uuid": "999bd21e-58c1-4b72-8e94-0d57ac518bb6",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "b2ee0141-0f5c-4124-8d86-8e8640f9d720",
            "388778fd-55b8-4808-94c1-9a715bf84190",
            "850ebdc0-d79f-4edd-84dc-26e2011ae88a",
            "ac99fc15-b4fc-4f4a-a304-f4d009567e60",
            "31c5a722-abe0-4c33-a985-5523304910c9",
            "6f255ce7-e860-4832-ae30-0d05fdb0c2fe",
            "598b4a7d-22d9-490e-9a0b-da11c4e3946e",
            "9f0b7ccf-9fb9-4417-ab8c-71c285ffdf0c",
            "8da2ff2e-916b-4e62-9d9e-5823b5a38423",
            "b8be46c1-5d1b-4594-8183-52b85a3ca360",
            "5f1e0b1b-e9c1-4bec-bc93-8561f2843f39",
            "bec0e3df-0e20-49cc-b084-221e91c0a676",
            "999bd21e-58c1-4b72-8e94-0d57ac518bb6"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3625b9d6-6f1a-4524-8cfd-df8337a13d99",
      "title": "",
      "fullFile": "cypress\\tests\\Signin.spec.js",
      "file": "cypress\\tests\\Signin.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
          "title": "User sign in process",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to sign in successfully",
              "fullTitle": "User sign in process Verify user is able to sign in successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertSuccess(); // Assert successful sign-in",
              "err": {},
              "uuid": "ab255fd7-00ca-4c95-b97d-3438ac9ed5e0",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with a wrong email address",
              "fullTitle": "User sign in process Verify user is unable to sign in with a wrong email address",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.wrongEmail; // Get wrong email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertFailure(); // Assert failure due to wrong email",
              "err": {},
              "uuid": "7dd3f987-e4c9-49a8-9f48-e7cbaa903dc7",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an invalid email address",
              "fullTitle": "User sign in process Verify user is unable to sign in with an invalid email address",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.invalidEmail; // Get invalid email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertInvalidEmail(); // Assert failure due to invalid email format",
              "err": {},
              "uuid": "e9e8a645-3176-4fe4-9e6a-bb6279d88590",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with invalid password",
              "fullTitle": "User sign in process Verify user is unable to sign in with invalid password",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.invalidPassword; // Get invalid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertFailure(); // Assert failure due to invalid password",
              "err": {},
              "uuid": "a53a68cb-db21-4153-8f29-d5043a746210",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty password field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty password field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.invalidPassword; // Get any password to clear later\nsignIn.signInEmptyPassword(email, password); // Perform sign-in with empty password\nsignIn.assertEmptyPassword(); // Assert failure due to empty password",
              "err": {},
              "uuid": "81636bfd-e013-4e03-bd8d-84c984629a1d",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty email field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty email field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get any email to clear later\nconst password = data.password; // Get valid password from test data\nsignIn.signInEmptyEmail(email, password); // Perform sign-in with empty email\nsignIn.assertEmptyEmail(); // Assert failure due to empty email",
              "err": {},
              "uuid": "9042d944-a992-43e6-a21b-67437102edad",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty email and password field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty email and password field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get any email to clear later\nconst password = data.password; // Get valid password from test data\nsignIn.signInEmptyEmailAndPassword(email, password); // Perform sign-in with both fields empty\nsignIn.assertEmptyEmail(); // Assert failure due to empty email\nsignIn.assertEmptyPassword(); // Assert failure due to empty password",
              "err": {},
              "uuid": "e43563af-bc25-485b-bf1f-adb12067c3e2",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "ab255fd7-00ca-4c95-b97d-3438ac9ed5e0",
            "7dd3f987-e4c9-49a8-9f48-e7cbaa903dc7",
            "e9e8a645-3176-4fe4-9e6a-bb6279d88590",
            "a53a68cb-db21-4153-8f29-d5043a746210",
            "81636bfd-e013-4e03-bd8d-84c984629a1d",
            "9042d944-a992-43e6-a21b-67437102edad",
            "e43563af-bc25-485b-bf1f-adb12067c3e2"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9109bffd-3583-45ec-a8b1-7befe1a6ab6f",
      "title": "",
      "fullFile": "cypress\\tests\\ViewPlans.spec.js",
      "file": "cypress\\tests\\ViewPlans.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fd6c4d54-28ec-412e-beb7-830355476713",
          "title": "View plans",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to view plans",
              "fullTitle": "View plans Verify user is able to view plans",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "// Click on the plans button to navigate to the plans page\nviewPlans.clickPlansButton();\n// Assert that plans are displayed successfully\nviewPlans.assertPlans();",
              "err": {},
              "uuid": "37fc923f-b397-4712-b188-e6d66215e22c",
              "parentUUID": "fd6c4d54-28ec-412e-beb7-830355476713",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "37fc923f-b397-4712-b188-e6d66215e22c"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "324328c7-b200-4159-bc4d-90de33ddf369",
      "title": "",
      "fullFile": "cypress\\tests\\ViewWallet.spec.js",
      "file": "cypress\\tests\\ViewWallet.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8b32022e-3e1a-48a8-a1c5-157af5e083f6",
          "title": "User view wallet process",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to view wallet successfully",
              "fullTitle": "User view wallet process Verify user is able to view wallet successfully",
              "timedOut": null,
              "duration": 60254,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "viewWallet.openWallet(); // Navigate to the wallet page\nviewWallet.assertBalance(); // Assert that the wallet balance is displayed correctly",
              "err": {
                "message": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `User view wallet process`",
                "estack": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `User view wallet process`\n    at timedOutWaitingForPageLoad (https://app.risevest.com/__cypress/runner/cypress_runner.js:130682:64)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:131667:16)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:4186:41)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (https://app.risevest.com/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1697:18)\n    at _drainQueueStep (https://app.risevest.com/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (https://app.risevest.com/__cypress/runner/cypress_runner.js:2400:9)\n    at Async._drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2416:5)\n    at Async.drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2286:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://risevest/./cypress/tests/ViewWallet.spec.js:19:11)",
                "diff": null
              },
              "uuid": "27afbf5c-7acb-4796-9b94-484b5ce50c25",
              "parentUUID": "8b32022e-3e1a-48a8-a1c5-157af5e083f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "27afbf5c-7acb-4796-9b94-484b5ce50c25"
          ],
          "pending": [],
          "skipped": [],
          "duration": 60254,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "35f8d793-5e91-457b-bd04-33f7c023fe6d",
      "title": "",
      "fullFile": "cypress\\tests\\WalletBalance.spec.js",
      "file": "cypress\\tests\\WalletBalance.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5d33e79f-68d6-4363-81fd-d92c63a1ce98",
          "title": "Show/Hide Wallet Balance",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to hide wallet balance",
              "fullTitle": "Show/Hide Wallet Balance Verify user is able to hide wallet balance",
              "timedOut": null,
              "duration": 60222,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "walletBalance.clickEyeIcon(); // Click the eye icon to hide the balance\nwalletBalance.assertHideBalance(); // Assert that the balance is hidden",
              "err": {
                "message": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Show/Hide Wallet Balance`",
                "estack": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Show/Hide Wallet Balance`\n    at timedOutWaitingForPageLoad (https://app.risevest.com/__cypress/runner/cypress_runner.js:130682:64)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:131667:16)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:4186:41)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (https://app.risevest.com/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1697:18)\n    at _drainQueueStep (https://app.risevest.com/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (https://app.risevest.com/__cypress/runner/cypress_runner.js:2400:9)\n    at Async._drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2416:5)\n    at Async.drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2286:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://risevest/./cypress/tests/WalletBalance.spec.js:21:11)",
                "diff": null
              },
              "uuid": "4d74020b-65d6-4982-8020-ed68afa71cf3",
              "parentUUID": "5d33e79f-68d6-4363-81fd-d92c63a1ce98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to show wallet balance",
              "fullTitle": "Show/Hide Wallet Balance Verify user is able to show wallet balance",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "walletBalance.clickEyeIcon(); // Click the eye icon to hide the balance first\nwalletBalance.clickEyeIcon(); // Click the eye icon again to show the balance\nwalletBalance.assertShowBalance(); // Assert that the balance is visible",
              "err": {},
              "uuid": "86232460-d6b0-4e43-8818-51eaa2e97b41",
              "parentUUID": "5d33e79f-68d6-4363-81fd-d92c63a1ce98",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4d74020b-65d6-4982-8020-ed68afa71cf3"
          ],
          "pending": [],
          "skipped": [
            "86232460-d6b0-4e43-8818-51eaa2e97b41"
          ],
          "duration": 60222,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "57c09e43-cd15-4649-8faa-65e563b70f51",
      "title": "",
      "fullFile": "cypress\\tests\\CreatePlan.spec.js",
      "file": "cypress\\tests\\CreatePlan.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
          "title": "Create plan",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to create a business USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName(); // Generate a random plan name\nconst amount = createPlan.generateRandomAmount(); // Generate a random amount\nconst date = createPlan.generateRandomFutureDate(); // Generate a random future date\n// Create the USD business plan with generated values\ncreatePlan.usdBusinessPlan(name, amount, date);\n// Assert that the success message appears\ncreatePlan.assertSuccess();\n// Delete the created plans for cleanup\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "b2ee0141-0f5c-4124-8d86-8e8640f9d720",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a business naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "388778fd-55b8-4808-94c1-9a715bf84190",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a new investment plan",
              "fullTitle": "Create plan Verify user is able to create a new investment plan",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst percent = createPlan.getRandomPercentage(); // Generate random percentage\nconst age = createPlan.getRandomRetirementAge(); // Generate random retirement age\ncreatePlan.investmentPlan(name, amount, percent, age);\ncreatePlan.assertSuccess(); // Assert success message\ncreatePlan.deletePlans(); // Clean up by deleting created plans",
              "err": {},
              "uuid": "850ebdc0-d79f-4edd-84dc-26e2011ae88a",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "ac99fc15-b4fc-4f4a-a304-f4d009567e60",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.usdSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "31c5a722-abe0-4c33-a985-5523304910c9",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "6f255ce7-e860-4832-ae30-0d05fdb0c2fe",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "598b4a7d-22d9-490e-9a0b-da11c4e3946e",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "9f0b7ccf-9fb9-4417-ab8c-71c285ffdf0c",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "8da2ff2e-916b-4e62-9d9e-5823b5a38423",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "b8be46c1-5d1b-4594-8183-52b85a3ca360",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "5f1e0b1b-e9c1-4bec-bc93-8561f2843f39",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a past date",
              "fullTitle": "Create plan Verify user is unable to create plan with a past date",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.pastDate; // Past date\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to past date",
              "err": {},
              "uuid": "bec0e3df-0e20-49cc-b084-221e91c0a676",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a invalid date",
              "fullTitle": "Create plan Verify user is unable to create plan with a invalid date",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.invalidDate; // Invalid date format\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to invalid date",
              "err": {},
              "uuid": "999bd21e-58c1-4b72-8e94-0d57ac518bb6",
              "parentUUID": "eb3ca925-b868-4986-ab9b-812ea01ebdbd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "b2ee0141-0f5c-4124-8d86-8e8640f9d720",
            "388778fd-55b8-4808-94c1-9a715bf84190",
            "850ebdc0-d79f-4edd-84dc-26e2011ae88a",
            "ac99fc15-b4fc-4f4a-a304-f4d009567e60",
            "31c5a722-abe0-4c33-a985-5523304910c9",
            "6f255ce7-e860-4832-ae30-0d05fdb0c2fe",
            "598b4a7d-22d9-490e-9a0b-da11c4e3946e",
            "9f0b7ccf-9fb9-4417-ab8c-71c285ffdf0c",
            "8da2ff2e-916b-4e62-9d9e-5823b5a38423",
            "b8be46c1-5d1b-4594-8183-52b85a3ca360",
            "5f1e0b1b-e9c1-4bec-bc93-8561f2843f39",
            "bec0e3df-0e20-49cc-b084-221e91c0a676",
            "999bd21e-58c1-4b72-8e94-0d57ac518bb6"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "3625b9d6-6f1a-4524-8cfd-df8337a13d99",
      "title": "",
      "fullFile": "cypress\\tests\\Signin.spec.js",
      "file": "cypress\\tests\\Signin.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
          "title": "User sign in process",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to sign in successfully",
              "fullTitle": "User sign in process Verify user is able to sign in successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertSuccess(); // Assert successful sign-in",
              "err": {},
              "uuid": "ab255fd7-00ca-4c95-b97d-3438ac9ed5e0",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with a wrong email address",
              "fullTitle": "User sign in process Verify user is unable to sign in with a wrong email address",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.wrongEmail; // Get wrong email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertFailure(); // Assert failure due to wrong email",
              "err": {},
              "uuid": "7dd3f987-e4c9-49a8-9f48-e7cbaa903dc7",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an invalid email address",
              "fullTitle": "User sign in process Verify user is unable to sign in with an invalid email address",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.invalidEmail; // Get invalid email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertInvalidEmail(); // Assert failure due to invalid email format",
              "err": {},
              "uuid": "e9e8a645-3176-4fe4-9e6a-bb6279d88590",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with invalid password",
              "fullTitle": "User sign in process Verify user is unable to sign in with invalid password",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.invalidPassword; // Get invalid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertFailure(); // Assert failure due to invalid password",
              "err": {},
              "uuid": "a53a68cb-db21-4153-8f29-d5043a746210",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty password field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty password field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.invalidPassword; // Get any password to clear later\nsignIn.signInEmptyPassword(email, password); // Perform sign-in with empty password\nsignIn.assertEmptyPassword(); // Assert failure due to empty password",
              "err": {},
              "uuid": "81636bfd-e013-4e03-bd8d-84c984629a1d",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty email field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty email field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get any email to clear later\nconst password = data.password; // Get valid password from test data\nsignIn.signInEmptyEmail(email, password); // Perform sign-in with empty email\nsignIn.assertEmptyEmail(); // Assert failure due to empty email",
              "err": {},
              "uuid": "9042d944-a992-43e6-a21b-67437102edad",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty email and password field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty email and password field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get any email to clear later\nconst password = data.password; // Get valid password from test data\nsignIn.signInEmptyEmailAndPassword(email, password); // Perform sign-in with both fields empty\nsignIn.assertEmptyEmail(); // Assert failure due to empty email\nsignIn.assertEmptyPassword(); // Assert failure due to empty password",
              "err": {},
              "uuid": "e43563af-bc25-485b-bf1f-adb12067c3e2",
              "parentUUID": "40a9a085-cc02-40c3-a66f-e76ac23e6553",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "ab255fd7-00ca-4c95-b97d-3438ac9ed5e0",
            "7dd3f987-e4c9-49a8-9f48-e7cbaa903dc7",
            "e9e8a645-3176-4fe4-9e6a-bb6279d88590",
            "a53a68cb-db21-4153-8f29-d5043a746210",
            "81636bfd-e013-4e03-bd8d-84c984629a1d",
            "9042d944-a992-43e6-a21b-67437102edad",
            "e43563af-bc25-485b-bf1f-adb12067c3e2"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "9109bffd-3583-45ec-a8b1-7befe1a6ab6f",
      "title": "",
      "fullFile": "cypress\\tests\\ViewPlans.spec.js",
      "file": "cypress\\tests\\ViewPlans.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fd6c4d54-28ec-412e-beb7-830355476713",
          "title": "View plans",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to view plans",
              "fullTitle": "View plans Verify user is able to view plans",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "// Click on the plans button to navigate to the plans page\nviewPlans.clickPlansButton();\n// Assert that plans are displayed successfully\nviewPlans.assertPlans();",
              "err": {},
              "uuid": "37fc923f-b397-4712-b188-e6d66215e22c",
              "parentUUID": "fd6c4d54-28ec-412e-beb7-830355476713",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "37fc923f-b397-4712-b188-e6d66215e22c"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "324328c7-b200-4159-bc4d-90de33ddf369",
      "title": "",
      "fullFile": "cypress\\tests\\ViewWallet.spec.js",
      "file": "cypress\\tests\\ViewWallet.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "8b32022e-3e1a-48a8-a1c5-157af5e083f6",
          "title": "User view wallet process",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to view wallet successfully",
              "fullTitle": "User view wallet process Verify user is able to view wallet successfully",
              "timedOut": null,
              "duration": 60254,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "viewWallet.openWallet(); // Navigate to the wallet page\nviewWallet.assertBalance(); // Assert that the wallet balance is displayed correctly",
              "err": {
                "message": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `User view wallet process`",
                "estack": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `User view wallet process`\n    at timedOutWaitingForPageLoad (https://app.risevest.com/__cypress/runner/cypress_runner.js:130682:64)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:131667:16)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:4186:41)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (https://app.risevest.com/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1697:18)\n    at _drainQueueStep (https://app.risevest.com/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (https://app.risevest.com/__cypress/runner/cypress_runner.js:2400:9)\n    at Async._drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2416:5)\n    at Async.drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2286:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://risevest/./cypress/tests/ViewWallet.spec.js:19:11)",
                "diff": null
              },
              "uuid": "27afbf5c-7acb-4796-9b94-484b5ce50c25",
              "parentUUID": "8b32022e-3e1a-48a8-a1c5-157af5e083f6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "27afbf5c-7acb-4796-9b94-484b5ce50c25"
          ],
          "pending": [],
          "skipped": [],
          "duration": 60254,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "35f8d793-5e91-457b-bd04-33f7c023fe6d",
      "title": "",
      "fullFile": "cypress\\tests\\WalletBalance.spec.js",
      "file": "cypress\\tests\\WalletBalance.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5d33e79f-68d6-4363-81fd-d92c63a1ce98",
          "title": "Show/Hide Wallet Balance",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to hide wallet balance",
              "fullTitle": "Show/Hide Wallet Balance Verify user is able to hide wallet balance",
              "timedOut": null,
              "duration": 60222,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "walletBalance.clickEyeIcon(); // Click the eye icon to hide the balance\nwalletBalance.assertHideBalance(); // Assert that the balance is hidden",
              "err": {
                "message": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Show/Hide Wallet Balance`",
                "estack": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `Users\\shola.olagbemisoye\\IdeaProjects\\Risevest\\Risevest\\cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Show/Hide Wallet Balance`\n    at timedOutWaitingForPageLoad (https://app.risevest.com/__cypress/runner/cypress_runner.js:130682:64)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:131667:16)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:4186:41)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (https://app.risevest.com/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1697:18)\n    at _drainQueueStep (https://app.risevest.com/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (https://app.risevest.com/__cypress/runner/cypress_runner.js:2400:9)\n    at Async._drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2416:5)\n    at Async.drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2286:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://risevest/./cypress/tests/WalletBalance.spec.js:21:11)",
                "diff": null
              },
              "uuid": "4d74020b-65d6-4982-8020-ed68afa71cf3",
              "parentUUID": "5d33e79f-68d6-4363-81fd-d92c63a1ce98",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to show wallet balance",
              "fullTitle": "Show/Hide Wallet Balance Verify user is able to show wallet balance",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "walletBalance.clickEyeIcon(); // Click the eye icon to hide the balance first\nwalletBalance.clickEyeIcon(); // Click the eye icon again to show the balance\nwalletBalance.assertShowBalance(); // Assert that the balance is visible",
              "err": {},
              "uuid": "86232460-d6b0-4e43-8818-51eaa2e97b41",
              "parentUUID": "5d33e79f-68d6-4363-81fd-d92c63a1ce98",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "4d74020b-65d6-4982-8020-ed68afa71cf3"
          ],
          "pending": [],
          "skipped": [
            "86232460-d6b0-4e43-8818-51eaa2e97b41"
          ],
          "duration": 60222,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true,
        "quiet": true,
        "timestamp": "mmddyyyy_HHMMss"
      },
      "version": "6.2.0"
    }
  }
}