{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 13,
    "failures": -12,
    "start": "2024-10-24T23:39:52.799Z",
    "end": "2024-10-24T23:39:53.299Z",
    "duration": 500,
    "testsRegistered": 13,
    "passPercent": null,
    "pendingPercent": 100,
    "other": 12,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5e3bac4b-4455-4528-8cb1-119cabb69b04",
      "title": "",
      "fullFile": "cypress\\tests\\CreatePlan.spec.js",
      "file": "cypress\\tests\\CreatePlan.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c17e63f9-bc8c-474e-9764-dd442ac810df",
          "title": "Create plan",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to create a business USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName(); // Generate a random plan name\nconst amount = createPlan.generateRandomAmount(); // Generate a random amount\nconst date = createPlan.generateRandomFutureDate(); // Generate a random future date\n// Create the USD business plan with generated values\ncreatePlan.usdBusinessPlan(name, amount, date);\n// Assert that the success message appears\ncreatePlan.assertSuccess();\n// Delete the created plans for cleanup\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "2b0d5455-6871-482c-8905-084321b85b08",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a business naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "bed609cd-42fc-48f4-8c0f-d86bb048031c",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a new investment plan",
              "fullTitle": "Create plan Verify user is able to create a new investment plan",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst percent = createPlan.getRandomPercentage(); // Generate random percentage\nconst age = createPlan.getRandomRetirementAge(); // Generate random retirement age\ncreatePlan.investmentPlan(name, amount, percent, age);\ncreatePlan.assertSuccess(); // Assert success message\ncreatePlan.deletePlans(); // Clean up by deleting created plans",
              "err": {},
              "uuid": "6fcb5a94-4c06-42b4-8643-6e4b93d68413",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "d3b7de20-0472-4f92-bb82-c3ad58eaf1c8",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.usdSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "12396a15-e094-4b0f-89b2-fc44fbd7e9fa",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "f3f18295-339b-4779-92e8-7e22b5617c5e",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "ff6304b9-4b56-4153-85da-9bc7d9830138",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "562aa40f-383a-42a3-aa01-cbca03c1d01a",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "bed9b878-1da2-4a8a-aeb5-9e193adab7ff",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "213e017c-02c2-4357-a291-fdfd6cf1f2f2",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "c61d9740-6d35-4416-93e9-53ce105b3afa",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a past date",
              "fullTitle": "Create plan Verify user is unable to create plan with a past date",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.pastDate; // Past date\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to past date",
              "err": {},
              "uuid": "981d9655-945c-4020-bcff-3945fa4ca956",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a invalid date",
              "fullTitle": "Create plan Verify user is unable to create plan with a invalid date",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.invalidDate; // Invalid date format\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to invalid date",
              "err": {},
              "uuid": "a92e6481-a684-4e76-b1be-d020632c569f",
              "parentUUID": "c17e63f9-bc8c-474e-9764-dd442ac810df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "2b0d5455-6871-482c-8905-084321b85b08",
            "bed609cd-42fc-48f4-8c0f-d86bb048031c",
            "6fcb5a94-4c06-42b4-8643-6e4b93d68413",
            "d3b7de20-0472-4f92-bb82-c3ad58eaf1c8",
            "12396a15-e094-4b0f-89b2-fc44fbd7e9fa",
            "f3f18295-339b-4779-92e8-7e22b5617c5e",
            "ff6304b9-4b56-4153-85da-9bc7d9830138",
            "562aa40f-383a-42a3-aa01-cbca03c1d01a",
            "bed9b878-1da2-4a8a-aeb5-9e193adab7ff",
            "213e017c-02c2-4357-a291-fdfd6cf1f2f2",
            "c61d9740-6d35-4416-93e9-53ce105b3afa",
            "981d9655-945c-4020-bcff-3945fa4ca956",
            "a92e6481-a684-4e76-b1be-d020632c569f"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true,
        "quiet": true,
        "timestamp": "mmddyyyy_HHMMss"
      },
      "version": "6.2.0"
    }
  }
}