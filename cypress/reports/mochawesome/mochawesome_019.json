{
  "stats": {
    "suites": 1,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2024-10-24T04:22:59.694Z",
    "end": "2024-10-24T04:23:55.774Z",
    "duration": 56080,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "59138b97-665c-4ce8-b6d6-bd23773378fa",
      "title": "",
      "fullFile": "cypress\\tests\\Signin.spec.js",
      "file": "cypress\\tests\\Signin.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "96016fa7-12a2-445d-8ff7-89a5855135c3",
          "title": "User sign in process",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to sign in successfully",
              "fullTitle": "User sign in process Verify user is able to sign in successfully",
              "timedOut": null,
              "duration": 11098,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertSuccess(); // Assert successful sign-in",
              "err": {},
              "uuid": "0a8635be-5c06-430f-ae6b-e9108006f205",
              "parentUUID": "96016fa7-12a2-445d-8ff7-89a5855135c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with a wrong email address",
              "fullTitle": "User sign in process Verify user is unable to sign in with a wrong email address",
              "timedOut": null,
              "duration": 10679,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = data.wrongEmail; // Get wrong email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertFailure(); // Assert failure due to wrong email",
              "err": {},
              "uuid": "101813e3-b9dc-4db8-ab16-b70c5616fb43",
              "parentUUID": "96016fa7-12a2-445d-8ff7-89a5855135c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an invalid email address",
              "fullTitle": "User sign in process Verify user is unable to sign in with an invalid email address",
              "timedOut": null,
              "duration": 10496,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = data.invalidEmail; // Get invalid email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertInvalidEmail(); // Assert failure due to invalid email format",
              "err": {},
              "uuid": "8c0574d4-e98b-47ca-a497-3f08921fb21a",
              "parentUUID": "96016fa7-12a2-445d-8ff7-89a5855135c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with invalid password",
              "fullTitle": "User sign in process Verify user is unable to sign in with invalid password",
              "timedOut": null,
              "duration": 9618,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.invalidPassword; // Get invalid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertFailure(); // Assert failure due to invalid password",
              "err": {},
              "uuid": "cc7df815-2aca-438a-b664-d474f9d863e4",
              "parentUUID": "96016fa7-12a2-445d-8ff7-89a5855135c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty password field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty password field",
              "timedOut": null,
              "duration": 4710,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.invalidPassword; // Get any password to clear later\nsignIn.signInEmptyPassword(email, password); // Perform sign-in with empty password\nsignIn.assertEmptyPassword(); // Assert failure due to empty password",
              "err": {},
              "uuid": "3fd7d612-f8b4-412d-add9-92e448d74353",
              "parentUUID": "96016fa7-12a2-445d-8ff7-89a5855135c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty email field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty email field",
              "timedOut": null,
              "duration": 4324,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = data.validEmail; // Get any email to clear later\nconst password = data.password; // Get valid password from test data\nsignIn.signInEmptyEmail(email, password); // Perform sign-in with empty email\nsignIn.assertEmptyEmail(); // Assert failure due to empty email",
              "err": {},
              "uuid": "dd737bbe-aa70-45b0-9fd8-d7e9a9697033",
              "parentUUID": "96016fa7-12a2-445d-8ff7-89a5855135c3",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty email and password field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty email and password field",
              "timedOut": null,
              "duration": 4701,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = data.validEmail; // Get any email to clear later\nconst password = data.password; // Get valid password from test data\nsignIn.signInEmptyEmailAndPassword(email, password); // Perform sign-in with both fields empty\nsignIn.assertEmptyEmail(); // Assert failure due to empty email\nsignIn.assertEmptyPassword(); // Assert failure due to empty password",
              "err": {},
              "uuid": "a33a7669-4333-4994-8a44-1f943bad97cf",
              "parentUUID": "96016fa7-12a2-445d-8ff7-89a5855135c3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0a8635be-5c06-430f-ae6b-e9108006f205",
            "101813e3-b9dc-4db8-ab16-b70c5616fb43",
            "8c0574d4-e98b-47ca-a497-3f08921fb21a",
            "cc7df815-2aca-438a-b664-d474f9d863e4",
            "3fd7d612-f8b4-412d-add9-92e448d74353",
            "dd737bbe-aa70-45b0-9fd8-d7e9a9697033",
            "a33a7669-4333-4994-8a44-1f943bad97cf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 55626,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}