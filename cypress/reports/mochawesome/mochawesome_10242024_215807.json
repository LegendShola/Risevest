{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 7,
    "failures": -6,
    "start": "2024-10-24T20:58:07.520Z",
    "end": "2024-10-24T20:58:07.582Z",
    "duration": 62,
    "testsRegistered": 7,
    "passPercent": null,
    "pendingPercent": 100,
    "other": 6,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "b227b315-d8b7-4d6a-b739-ac9551d44820",
      "title": "",
      "fullFile": "cypress\\tests\\Signin.spec.js",
      "file": "cypress\\tests\\Signin.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1bc4ad9d-cb35-427f-b848-c621185f4cab",
          "title": "User sign in process",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to sign in successfully",
              "fullTitle": "User sign in process Verify user is able to sign in successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertSuccess(); // Assert successful sign-in",
              "err": {},
              "uuid": "367c1b16-ee35-47be-be06-8a991f2b5d98",
              "parentUUID": "1bc4ad9d-cb35-427f-b848-c621185f4cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with a wrong email address",
              "fullTitle": "User sign in process Verify user is unable to sign in with a wrong email address",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.wrongEmail; // Get wrong email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertFailure(); // Assert failure due to wrong email",
              "err": {},
              "uuid": "fb4e462c-b68a-49c8-bc02-7c9e73c2a69c",
              "parentUUID": "1bc4ad9d-cb35-427f-b848-c621185f4cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an invalid email address",
              "fullTitle": "User sign in process Verify user is unable to sign in with an invalid email address",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.invalidEmail; // Get invalid email from test data\nconst password = data.password; // Get valid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertInvalidEmail(); // Assert failure due to invalid email format",
              "err": {},
              "uuid": "3da298d7-8fdf-465e-814f-f4cb25c86b90",
              "parentUUID": "1bc4ad9d-cb35-427f-b848-c621185f4cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with invalid password",
              "fullTitle": "User sign in process Verify user is unable to sign in with invalid password",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.invalidPassword; // Get invalid password from test data\nsignIn.signIn(email, password); // Perform sign-in action\nsignIn.assertFailure(); // Assert failure due to invalid password",
              "err": {},
              "uuid": "ec503c6b-b7cf-42b9-a7df-ec6e764107a2",
              "parentUUID": "1bc4ad9d-cb35-427f-b848-c621185f4cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty password field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty password field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get valid email from test data\nconst password = data.invalidPassword; // Get any password to clear later\nsignIn.signInEmptyPassword(email, password); // Perform sign-in with empty password\nsignIn.assertEmptyPassword(); // Assert failure due to empty password",
              "err": {},
              "uuid": "f65f2eb6-f375-4c89-b0d3-172087d93309",
              "parentUUID": "1bc4ad9d-cb35-427f-b848-c621185f4cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty email field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty email field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get any email to clear later\nconst password = data.password; // Get valid password from test data\nsignIn.signInEmptyEmail(email, password); // Perform sign-in with empty email\nsignIn.assertEmptyEmail(); // Assert failure due to empty email",
              "err": {},
              "uuid": "c301e83b-8453-4430-ad11-8e8cc5d3e1ea",
              "parentUUID": "1bc4ad9d-cb35-427f-b848-c621185f4cab",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to sign in with an empty email and password field",
              "fullTitle": "User sign in process Verify user is unable to sign in with an empty email and password field",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const email = data.validEmail; // Get any email to clear later\nconst password = data.password; // Get valid password from test data\nsignIn.signInEmptyEmailAndPassword(email, password); // Perform sign-in with both fields empty\nsignIn.assertEmptyEmail(); // Assert failure due to empty email\nsignIn.assertEmptyPassword(); // Assert failure due to empty password",
              "err": {},
              "uuid": "e16d8968-8aae-4c4c-ab39-e523db14b0e1",
              "parentUUID": "1bc4ad9d-cb35-427f-b848-c621185f4cab",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "367c1b16-ee35-47be-be06-8a991f2b5d98",
            "fb4e462c-b68a-49c8-bc02-7c9e73c2a69c",
            "3da298d7-8fdf-465e-814f-f4cb25c86b90",
            "ec503c6b-b7cf-42b9-a7df-ec6e764107a2",
            "f65f2eb6-f375-4c89-b0d3-172087d93309",
            "c301e83b-8453-4430-ad11-8e8cc5d3e1ea",
            "e16d8968-8aae-4c4c-ab39-e523db14b0e1"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": true,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true,
        "quiet": true,
        "timestamp": "mmddyyyy_HHMMss"
      },
      "version": "6.2.0"
    }
  }
}