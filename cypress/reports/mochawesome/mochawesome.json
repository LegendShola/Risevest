{
  "stats": {
    "suites": 1,
    "tests": 13,
    "passes": 9,
    "pending": 0,
    "failures": 4,
    "start": "2024-10-22T22:55:17.051Z",
    "end": "2024-10-22T23:04:15.056Z",
    "duration": 538005,
    "testsRegistered": 13,
    "passPercent": 69.23076923076923,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "82e75a62-5b93-4968-8b13-f5d07c2c361b",
      "title": "",
      "fullFile": "cypress\\tests\\CreatePlan.spec.js",
      "file": "cypress\\tests\\CreatePlan.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "67911d46-eb48-473c-b620-e740e3250e80",
          "title": "Create plan",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to create a business USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business USD plan successfully",
              "timedOut": null,
              "duration": 32893,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName(); // Generate a random plan name\nconst amount = createPlan.generateRandomAmount(); // Generate a random amount\nconst date = createPlan.generateRandomFutureDate(); // Generate a random future date\n// Create the USD business plan with generated values\ncreatePlan.usdBusinessPlan(name, amount, date);\n// Assert that the success message appears\ncreatePlan.assertSuccess();\n// Delete the created plans for cleanup\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "e1c9d37a-baa2-4985-bae0-faff898ea2d1",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a business naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business naira plan successfully",
              "timedOut": null,
              "duration": 21588,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {
                "message": "CypressError: `cy.click()` can only be called on a single element. Your subject contained 2 elements. Pass `{ multiple: true }` if you want to serially click each element.\n\nhttps://on.cypress.io/click",
                "estack": "CypressError: `cy.click()` can only be called on a single element. Your subject contained 2 elements. Pass `{ multiple: true }` if you want to serially click each element.\n\nhttps://on.cypress.io/click\n    at mouseAction (https://app.risevest.com/__cypress/runner/cypress_runner.js:112555:68)\n    at Context.click (https://app.risevest.com/__cypress/runner/cypress_runner.js:112722:14)\n    at wrapped (https://app.risevest.com/__cypress/runner/cypress_runner.js:138145:19)\nFrom Your Spec Code:\n    at createPlanPage.nairaBusinessPlan (webpack://risevest/./cypress/pageObjects/createPlanPage.js:139:39)\n    at Context.eval (webpack://risevest/./cypress/tests/CreatePlan.spec.js:49:19)",
                "diff": null
              },
              "uuid": "5cfd798a-3489-47d8-9975-c31247f8505b",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School naira plan successfully",
              "timedOut": null,
              "duration": 21782,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {
                "message": "CypressError: `cy.click()` can only be called on a single element. Your subject contained 2 elements. Pass `{ multiple: true }` if you want to serially click each element.\n\nhttps://on.cypress.io/click",
                "estack": "CypressError: `cy.click()` can only be called on a single element. Your subject contained 2 elements. Pass `{ multiple: true }` if you want to serially click each element.\n\nhttps://on.cypress.io/click\n    at mouseAction (https://app.risevest.com/__cypress/runner/cypress_runner.js:112555:68)\n    at Context.click (https://app.risevest.com/__cypress/runner/cypress_runner.js:112722:14)\n    at wrapped (https://app.risevest.com/__cypress/runner/cypress_runner.js:138145:19)\nFrom Your Spec Code:\n    at createPlanPage.nairaSchoolPlan (webpack://risevest/./cypress/pageObjects/createPlanPage.js:164:39)\n    at Context.eval (webpack://risevest/./cypress/tests/CreatePlan.spec.js:60:19)",
                "diff": null
              },
              "uuid": "9038a0fb-67d9-4951-9938-18fe119ddc2d",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School USD plan successfully",
              "timedOut": null,
              "duration": 19768,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.usdSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {
                "message": "CypressError: `cy.click()` can only be called on a single element. Your subject contained 2 elements. Pass `{ multiple: true }` if you want to serially click each element.\n\nhttps://on.cypress.io/click",
                "estack": "CypressError: `cy.click()` can only be called on a single element. Your subject contained 2 elements. Pass `{ multiple: true }` if you want to serially click each element.\n\nhttps://on.cypress.io/click\n    at mouseAction (https://app.risevest.com/__cypress/runner/cypress_runner.js:112555:68)\n    at Context.click (https://app.risevest.com/__cypress/runner/cypress_runner.js:112722:14)\n    at wrapped (https://app.risevest.com/__cypress/runner/cypress_runner.js:138145:19)\nFrom Your Spec Code:\n    at createPlanPage.usdSchoolPlan (webpack://risevest/./cypress/pageObjects/createPlanPage.js:149:39)\n    at Context.eval (webpack://risevest/./cypress/tests/CreatePlan.spec.js:71:19)",
                "diff": null
              },
              "uuid": "20fa6ae7-d738-4547-bbcb-ca60412f5b4c",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 40387,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "e11a0b08-bfb3-4834-a28a-389de550fda4",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 46240,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "ff24c11d-744f-4c96-8b4e-9258e4084870",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 43983,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "4f9c8c1f-15fb-4f7d-b200-2d27ec410f63",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 53454,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "e55b8d31-0451-4289-af51-e50b51e03516",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 57610,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "f7ae5ff1-b660-4dd1-9498-e59f338ffae8",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 43628,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "5d302ffc-cc4f-42a3-b868-d6d0be22aff6",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a past date",
              "fullTitle": "Create plan Verify user is unable to create plan with a past date",
              "timedOut": null,
              "duration": 32900,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = \"22-03-2022\"; // Past date\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to past date",
              "err": {},
              "uuid": "27ebb782-4950-4b88-b14f-772352dc52ca",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a null date",
              "fullTitle": "Create plan Verify user is unable to create plan with a null date",
              "timedOut": null,
              "duration": 53702,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = \"DD-MM-YYYY\"; // Invalid date format\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to invalid date",
              "err": {
                "message": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `//div[contains(text(),'Your request body is invalid')]`, but never found it.",
                "estack": "AssertionError: Timed out retrying after 10000ms: Expected to find element: `//div[contains(text(),'Your request body is invalid')]`, but never found it.\n    at createPlanPage.assertDateFailure (webpack://risevest/./cypress/pageObjects/createPlanPage.js:252:13)\n    at Context.eval (webpack://risevest/./cypress/tests/CreatePlan.spec.js:129:19)",
                "diff": null
              },
              "uuid": "51a004e9-0564-4413-835e-ab0c79d11528",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a new investment plan",
              "fullTitle": "Create plan Verify user is able to create a new investment plan",
              "timedOut": null,
              "duration": 61696,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst percent = createPlan.getRandomPercentage(); // Generate random percentage\nconst age = createPlan.getRandomRetirementAge(); // Generate random retirement age\ncreatePlan.investmentPlan(name, amount, percent, age);\ncreatePlan.assertSuccess(); // Assert success message\ncreatePlan.deletePlans(); // Clean up by deleting created plans",
              "err": {},
              "uuid": "02d64997-d906-43e5-b14a-2bdfd6e8d5d5",
              "parentUUID": "67911d46-eb48-473c-b620-e740e3250e80",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e1c9d37a-baa2-4985-bae0-faff898ea2d1",
            "e11a0b08-bfb3-4834-a28a-389de550fda4",
            "ff24c11d-744f-4c96-8b4e-9258e4084870",
            "4f9c8c1f-15fb-4f7d-b200-2d27ec410f63",
            "e55b8d31-0451-4289-af51-e50b51e03516",
            "f7ae5ff1-b660-4dd1-9498-e59f338ffae8",
            "5d302ffc-cc4f-42a3-b868-d6d0be22aff6",
            "27ebb782-4950-4b88-b14f-772352dc52ca",
            "02d64997-d906-43e5-b14a-2bdfd6e8d5d5"
          ],
          "failures": [
            "5cfd798a-3489-47d8-9975-c31247f8505b",
            "9038a0fb-67d9-4951-9938-18fe119ddc2d",
            "20fa6ae7-d738-4547-bbcb-ca60412f5b4c",
            "51a004e9-0564-4413-835e-ab0c79d11528"
          ],
          "pending": [],
          "skipped": [],
          "duration": 529631,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}