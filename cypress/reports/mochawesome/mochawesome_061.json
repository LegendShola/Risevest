{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2024-10-24T07:22:32.766Z",
    "end": "2024-10-24T07:23:17.826Z",
    "duration": 45060,
    "testsRegistered": 13,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 12,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "e3e09233-44e1-4f8e-85b7-b9bfe2172dd5",
      "title": "",
      "fullFile": "cypress\\tests\\CreatePlan.spec.js",
      "file": "cypress\\tests\\CreatePlan.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
          "title": "Create plan",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to create a business USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business USD plan successfully",
              "timedOut": null,
              "duration": 44928,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName(); // Generate a random plan name\nconst amount = createPlan.generateRandomAmount(); // Generate a random amount\nconst date = createPlan.generateRandomFutureDate(); // Generate a random future date\n// Create the USD business plan with generated values\ncreatePlan.usdBusinessPlan(name, amount, date);\n// Assert that the success message appears\ncreatePlan.assertSuccess();\n// Delete the created plans for cleanup\ncreatePlan.deletePlans();",
              "err": {
                "message": "AssertionError: Timed out retrying after 12000ms: Expected to find element: `[href=\"/plans\"]`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Create plan`",
                "estack": "AssertionError: Timed out retrying after 12000ms: Expected to find element: `[href=\"/plans\"]`, but never found it.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Create plan`\n    at Object.plansButton (webpack://risevest/./cypress/pageObjects/viewPlansPage.js:5:30)\n    at viewPlansPage.clickPlansButton (webpack://risevest/./cypress/pageObjects/viewPlansPage.js:10:22)\n    at Context.eval (webpack://risevest/./cypress/tests/CreatePlan.spec.js:26:18)",
                "diff": null
              },
              "uuid": "9722da68-c851-4fff-aa11-f049d7e54a61",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a business naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "e6d20d08-7f94-459f-81a3-52f52b865736",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is able to create a new investment plan",
              "fullTitle": "Create plan Verify user is able to create a new investment plan",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst percent = createPlan.getRandomPercentage(); // Generate random percentage\nconst age = createPlan.getRandomRetirementAge(); // Generate random retirement age\ncreatePlan.investmentPlan(name, amount, percent, age);\ncreatePlan.assertSuccess(); // Assert success message\ncreatePlan.deletePlans(); // Clean up by deleting created plans",
              "err": {},
              "uuid": "908a97cd-cbc5-4a27-8b78-5368e6a2d6ea",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is able to create a School naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "a9c865fd-176d-487b-9922-3c45fa44dc91",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is able to create a School USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.usdSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "8a83cd47-2ac9-4f19-86f9-3c129efb6f11",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "cfc0912d-1ee9-4e3e-b136-8dd0f5f43fd0",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "a1459c61-72a8-4af6-9f88-6783a3fd8823",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "583b4c55-cc99-45c8-8f7f-e1782d5e1f88",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "c0f2d6b8-4b8e-4c07-8f60-7ca6f0c4290a",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "3023ebf8-fe4f-4589-bf59-7351b1450ffa",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "f034d49d-28af-4732-a96e-4485e81772e6",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is unable to create plan with a past date",
              "fullTitle": "Create plan Verify user is unable to create plan with a past date",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.pastDate; // Past date\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to past date",
              "err": {},
              "uuid": "3826ab70-838b-4e66-a093-be021826bf19",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is unable to create plan with a invalid date",
              "fullTitle": "Create plan Verify user is unable to create plan with a invalid date",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.invalidDate; // Invalid date format\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to invalid date",
              "err": {},
              "uuid": "380e17e5-3a7f-4733-a4f7-328b136c7897",
              "parentUUID": "86d9a7de-9b28-48a4-b4bb-5b3854c53065",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "9722da68-c851-4fff-aa11-f049d7e54a61"
          ],
          "pending": [],
          "skipped": [
            "e6d20d08-7f94-459f-81a3-52f52b865736",
            "908a97cd-cbc5-4a27-8b78-5368e6a2d6ea",
            "a9c865fd-176d-487b-9922-3c45fa44dc91",
            "8a83cd47-2ac9-4f19-86f9-3c129efb6f11",
            "cfc0912d-1ee9-4e3e-b136-8dd0f5f43fd0",
            "a1459c61-72a8-4af6-9f88-6783a3fd8823",
            "583b4c55-cc99-45c8-8f7f-e1782d5e1f88",
            "c0f2d6b8-4b8e-4c07-8f60-7ca6f0c4290a",
            "3023ebf8-fe4f-4589-bf59-7351b1450ffa",
            "f034d49d-28af-4732-a96e-4485e81772e6",
            "3826ab70-838b-4e66-a093-be021826bf19",
            "380e17e5-3a7f-4733-a4f7-328b136c7897"
          ],
          "duration": 44928,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}