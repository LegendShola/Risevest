{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 0,
    "failures": 1,
    "start": "2024-10-23T20:25:53.037Z",
    "end": "2024-10-23T20:26:53.391Z",
    "duration": 60354,
    "testsRegistered": 13,
    "passPercent": 0,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 12,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "867be8d3-1a1f-409a-9497-1324641ff80e",
      "title": "",
      "fullFile": "cypress\\tests\\CreatePlan.spec.js",
      "file": "cypress\\tests\\CreatePlan.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
          "title": "Create plan",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to create a business USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business USD plan successfully",
              "timedOut": null,
              "duration": 60271,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName(); // Generate a random plan name\nconst amount = createPlan.generateRandomAmount(); // Generate a random amount\nconst date = createPlan.generateRandomFutureDate(); // Generate a random future date\n// Create the USD business plan with generated values\ncreatePlan.usdBusinessPlan(name, amount, date);\n// Assert that the success message appears\ncreatePlan.assertSuccess();\n// Delete the created plans for cleanup\ncreatePlan.deletePlans();",
              "err": {
                "message": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Create plan`",
                "estack": "CypressError: Timed out after waiting `60000ms` for your remote page to load.\n\nYour page did not fire its `load` event within `60000ms`.\n\nYou can try increasing the `pageLoadTimeout` value in `cypress.config.js` to wait longer.\n\nBrowsers will not fire the `load` event until all stylesheets and scripts are done downloading.\n\nWhen this `load` event occurs, Cypress will continue running commands.\n\nBecause this error occurred during a `before each` hook we are skipping the remaining tests in the current suite: `Create plan`\n    at timedOutWaitingForPageLoad (https://app.risevest.com/__cypress/runner/cypress_runner.js:130682:64)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:131667:16)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at <unknown> (https://app.risevest.com/__cypress/runner/cypress_runner.js:4186:41)\n    at tryCatcher (https://app.risevest.com/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (https://app.risevest.com/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (https://app.risevest.com/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (https://app.risevest.com/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (https://app.risevest.com/__cypress/runner/cypress_runner.js:1697:18)\n    at _drainQueueStep (https://app.risevest.com/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (https://app.risevest.com/__cypress/runner/cypress_runner.js:2400:9)\n    at Async._drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2416:5)\n    at Async.drainQueues (https://app.risevest.com/__cypress/runner/cypress_runner.js:2286:14)\nFrom Your Spec Code:\n    at Context.eval (webpack://risevest/./cypress/tests/CreatePlan.spec.js:22:11)",
                "diff": null
              },
              "uuid": "09811041-fe17-47c5-85e9-6cd09130adf9",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a business naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "7bd48c54-717f-45a1-9c58-beca0c9d4494",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is able to create a new investment plan",
              "fullTitle": "Create plan Verify user is able to create a new investment plan",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst percent = createPlan.getRandomPercentage(); // Generate random percentage\nconst age = createPlan.getRandomRetirementAge(); // Generate random retirement age\ncreatePlan.investmentPlan(name, amount, percent, age);\ncreatePlan.assertSuccess(); // Assert success message\ncreatePlan.deletePlans(); // Clean up by deleting created plans",
              "err": {},
              "uuid": "0e27994e-0b1e-493a-aeb3-f78c72c7597e",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is able to create a School naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "663d74e0-853c-45d8-be4f-be5c67def7a8",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is able to create a School USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.usdSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "969c5b61-efd4-4740-9c40-3dd376d7c63e",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "cafbdf59-db18-41ee-bf9b-321128704eef",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "c3cb8b0f-14f1-45ab-825c-4da8ae1660f9",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "24e97c42-01c1-47ce-b3fa-6ec792113189",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "14b6e2b2-a7f0-417f-a4ad-2568f3eb404e",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "3c288917-7b8f-42fb-bf27-af8b269c9014",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "223d220b-49e8-46c2-9029-8d8b94b51bc0",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is unable to create plan with a past date",
              "fullTitle": "Create plan Verify user is unable to create plan with a past date",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = \"22-03-2022\"; // Past date\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to past date",
              "err": {},
              "uuid": "c308b0e4-ca13-474a-a8b3-17448e84de8a",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            },
            {
              "title": "Verify user is unable to create plan with a invalid date",
              "fullTitle": "Create plan Verify user is unable to create plan with a invalid date",
              "timedOut": null,
              "duration": 0,
              "state": "skipped",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = \"23-04-0000\"; // Invalid date format\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to invalid date",
              "err": {},
              "uuid": "84b8e20d-9a40-4065-8011-6fcd46886d1e",
              "parentUUID": "4bc19952-2c6f-4ca5-baf8-b2951dfacfd4",
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "09811041-fe17-47c5-85e9-6cd09130adf9"
          ],
          "pending": [],
          "skipped": [
            "7bd48c54-717f-45a1-9c58-beca0c9d4494",
            "0e27994e-0b1e-493a-aeb3-f78c72c7597e",
            "663d74e0-853c-45d8-be4f-be5c67def7a8",
            "969c5b61-efd4-4740-9c40-3dd376d7c63e",
            "cafbdf59-db18-41ee-bf9b-321128704eef",
            "c3cb8b0f-14f1-45ab-825c-4da8ae1660f9",
            "24e97c42-01c1-47ce-b3fa-6ec792113189",
            "14b6e2b2-a7f0-417f-a4ad-2568f3eb404e",
            "3c288917-7b8f-42fb-bf27-af8b269c9014",
            "223d220b-49e8-46c2-9029-8d8b94b51bc0",
            "c308b0e4-ca13-474a-a8b3-17448e84de8a",
            "84b8e20d-9a40-4065-8011-6fcd46886d1e"
          ],
          "duration": 60271,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}