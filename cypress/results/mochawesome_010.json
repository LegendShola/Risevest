{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 0,
    "pending": 13,
    "failures": -12,
    "start": "2024-10-24T14:55:35.465Z",
    "end": "2024-10-24T14:55:35.542Z",
    "duration": 77,
    "testsRegistered": 13,
    "passPercent": null,
    "pendingPercent": 100,
    "other": 12,
    "hasOther": true,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1096ff9a-7870-40d1-9feb-bce8f3b2c51e",
      "title": "",
      "fullFile": "cypress\\tests\\CreatePlan.spec.js",
      "file": "cypress\\tests\\CreatePlan.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
          "title": "Create plan",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user is able to create a business USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName(); // Generate a random plan name\nconst amount = createPlan.generateRandomAmount(); // Generate a random amount\nconst date = createPlan.generateRandomFutureDate(); // Generate a random future date\n// Create the USD business plan with generated values\ncreatePlan.usdBusinessPlan(name, amount, date);\n// Assert that the success message appears\ncreatePlan.assertSuccess();\n// Delete the created plans for cleanup\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "1599db05-9a41-4613-a7e1-3c2daea71117",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a business naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a business naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "3d8743c8-79d6-4ddc-bc5f-40415c2b5b9e",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a new investment plan",
              "fullTitle": "Create plan Verify user is able to create a new investment plan",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst percent = createPlan.getRandomPercentage(); // Generate random percentage\nconst age = createPlan.getRandomRetirementAge(); // Generate random retirement age\ncreatePlan.investmentPlan(name, amount, percent, age);\ncreatePlan.assertSuccess(); // Assert success message\ncreatePlan.deletePlans(); // Clean up by deleting created plans",
              "err": {},
              "uuid": "b2509107-8138-4754-817a-5ffd79236f7d",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School naira plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School naira plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.nairaSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "44923d6e-cc21-40f1-9b02-464af350dbb0",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is able to create a School USD plan successfully",
              "fullTitle": "Create plan Verify user is able to create a School USD plan successfully",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = createPlan.generateRandomFutureDate();\ncreatePlan.usdSchoolPlan(name, amount, date);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "f91020b6-2777-4a51-95fc-66ed97c0158c",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "3d8b41a6-1339-4c68-8618-684d935fba86",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "b61d01cb-a908-46f3-a1de-e0d74047cba4",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create real estate plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create real estate plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Real estate plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used for clarity\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeRealEstatePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "0369096d-497e-4ae0-a3d1-c650d998c1ef",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 12 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 12 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "1978b330-74bf-4557-b765-b6f583bbdf8a",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 6 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 6 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "da6d8795-5d37-4116-9ed9-9cb016f53a36",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "User is able to create fixed income plan and display correct percentage for 3 months",
              "fullTitle": "Create plan User is able to create fixed income plan and display correct percentage for 3 months",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = `Fixed income plan test case for ${months} months`;\nconst planName = createPlan.generatePlanName();\n// Log the values being used\ncy.log(`Creating a plan with name: ${name}`);\ncy.log(`Selecting month: ${months} and expecting percentage: ${expectedPercentage}%`);\n// Complete the plan flow, select the month, and assert the percentage\ncreatePlan.completeFixedIncomePlan(planName, months, expectedPercentage);\ncreatePlan.assertSuccess();\ncreatePlan.deletePlans();",
              "err": {},
              "uuid": "89f2563c-3a03-43e0-90c0-5fb3a0bf6689",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a past date",
              "fullTitle": "Create plan Verify user is unable to create plan with a past date",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.pastDate; // Past date\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to past date",
              "err": {},
              "uuid": "3194c819-f3f4-4321-af06-c12111d50b3d",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify user is unable to create plan with a invalid date",
              "fullTitle": "Create plan Verify user is unable to create plan with a invalid date",
              "timedOut": null,
              "duration": 0,
              "state": "pending",
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "const name = createPlan.generatePlanName();\nconst amount = createPlan.generateRandomAmount();\nconst date = data.invalidDate; // Invalid date format\ncreatePlan.nairaBusinessPlan(name, amount, date);\ncreatePlan.assertDateFailure(); // Assert failure due to invalid date",
              "err": {},
              "uuid": "3d0ae2bf-837f-4cd3-adc9-fdd4734bb598",
              "parentUUID": "d6301b3d-d1fb-47f3-a3c7-6926f52aeacf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "1599db05-9a41-4613-a7e1-3c2daea71117",
            "3d8743c8-79d6-4ddc-bc5f-40415c2b5b9e",
            "b2509107-8138-4754-817a-5ffd79236f7d",
            "44923d6e-cc21-40f1-9b02-464af350dbb0",
            "f91020b6-2777-4a51-95fc-66ed97c0158c",
            "3d8b41a6-1339-4c68-8618-684d935fba86",
            "b61d01cb-a908-46f3-a1de-e0d74047cba4",
            "0369096d-497e-4ae0-a3d1-c650d998c1ef",
            "1978b330-74bf-4557-b765-b6f583bbdf8a",
            "da6d8795-5d37-4116-9ed9-9cb016f53a36",
            "89f2563c-3a03-43e0-90c0-5fb3a0bf6689",
            "3194c819-f3f4-4321-af06-c12111d50b3d",
            "3d0ae2bf-837f-4cd3-adc9-fdd4734bb598"
          ],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/results",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}